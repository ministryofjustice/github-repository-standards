#!/usr/bin/env ruby

require "json"
require "net/http"
require "uri"
require "octokit"
require "time"

require_relative "../lib/github_graph_ql_client"
require_relative "../lib/repositories"
require_relative "../lib/standards_report"
require_relative "../lib/issue_creator"

graphql = GithubGraphQlClient.new(github_token: ENV.fetch("ADMIN_GITHUB_TOKEN"))

results = Repositories.new(graphql: graphql).list.map { |hash| StandardsReport.new(hash).report }

results.each do |x|
    params = {
        owner: "ministryofjustice",
        repository: x[:name],
        github_user: "ministryofjustice"
    }

    if x[:issues_enabled] == true
        if x[:default_branch] != "main"
            GithubRepositoryStandards::IssueCreator.new(params).create_default_branch_issue
        end

        if x[:report][:requires_approving_reviews] == false
            GithubRepositoryStandards::IssueCreator.new(params).create_requires_approving_reviews_issue
        end

        if x[:report][:administrators_require_review] == false
            GithubRepositoryStandards::IssueCreator.new(params).create_include_administrators_issue
        end

        if x[:report][:requires_code_owner_reviews] == false
            GithubRepositoryStandards::IssueCreator.new(params).create_requires_codeowner_reviews_issue
        end

        if x[:report][:has_require_approvals_enabled] == false
            GithubRepositoryStandards::IssueCreator.new(params).create_require_approvals_issue
        end   
    end
end

puts({
    data: results,
    updated_at: Time.now
}.to_json)
